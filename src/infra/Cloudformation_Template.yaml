AWSTemplateFormatVersion: 2010-09-09
Description: ver 0.1.1

Resources: 
  websiteBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: website-41722369
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  
  templateBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: cf-templates-264759380

  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ggstLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      Policies:
        - PolicyName: ggst-log-group-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/BotFunction:*
  
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt lambdaFunction.Arn
  
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BotFunction
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaRole.Arn
      Runtime: nodejs18.x
      Environment:
        Variables:
          example: value
      Code:
        ZipFile: |
          const http = require('http');
          
          const hostname = '127.0.0.1';
          const port = 3000;
          
          const server = http.createServer((req, res) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'text/plain');
            res.end('Hello World');
          });
          
          server.listen(port, hostname, () => {
            console.log(`Server running at http://${hostname}:${port}/`);
          }); 

  lambdaPermission:
    DependsOn: ApiResource
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*/*/lambdaProxy"

  comboTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Combos
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - 
          AttributeName: ServerID
          AttributeType: N
        - 
          AttributeName: ComboID
          AttributeType: N
      KeySchema:
        - 
          AttributeName: ServerID
          KeyType: HASH
        - 
          AttributeName: ComboID
          KeyType: RANGE

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: BotRestAPI
      ApiKeySourceType: HEADER
      EndpointConfiguration: 
          Types: 
            - REGIONAL

  ApiResource:
    DependsOn: RestAPI
    Type: AWS::ApiGateway::Resource
    Properties:
        RestApiId: !Ref RestAPI
        PathPart: lambdaProxy
        ParentId: !GetAtt RestAPI.RootResourceId

  ResourcePOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations'

  DevStage:
      DependsOn: ResourcePOSTMethod
      Type: AWS::ApiGateway::Deployment
      Properties:
          RestApiId: !Ref RestAPI
          StageName: Development

Outputs:
  WebsiteURL:
    Description: URL for website hosted on S3
    Value: !GetAtt websiteBucket.WebsiteURL
  WebsiteSecureURL:
    Description: Name of S3 bucket to hold website content
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt websiteBucket.DomainName
      