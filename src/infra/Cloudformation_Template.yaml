AWSTemplateFormatVersion: 2010-09-09
Description: ver 0.0.4

Metadata: 

Parameters: 

Mappings: 

Conditions: 

Resources: 
  websiteBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: website-41722369
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  
  templateBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: cf-templates-264759380

  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ggstLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      Policies:
        - PolicyName: ggst-log-group-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/codeExample:*
  
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: codeExample
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaRole.Arn
      Runtime: nodejs18.x
      Environment:
        Variables:
          example: value
      Code:
        ZipFile: |
          const http = require('http');
          
          const hostname = '127.0.0.1';
          const port = 3000;
          
          const server = http.createServer((req, res) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'text/plain');
            res.end('Hello World');
          });
          
          server.listen(port, hostname, () => {
            console.log(`Server running at http://${hostname}:${port}/`);
          }); 

  comboTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Combos
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - 
          AttributeName: ServerID
          AttributeType: N
        - 
          AttributeName: ComboID
          AttributeType: N
      KeySchema:
        - 
          AttributeName: ServerID
          KeyType: HASH
        - 
          AttributeName: ComboID
          KeyType: RANGE
      ProvisionedCapacitySettings:
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  comboAPI:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: comboAPI
      ApiKeySourceType: HEADER
      EndpointConfiguration: 
          Types: 
            - REGIONAL

  apiResource:
      Type: AWS::ApiGateway::Resource
      Properties:
          RestApiId: !Ref comboAPI
          PathPart: combo
          ParentId: !GetAtt comboAPI.RootResourceId

  RootANYMethod:
      Type: AWS::ApiGateway::Method
      Properties:
          RestApiId: !Ref comboAPI
          ResourceId: !Ref apiResource
          HttpMethod: ANY
          AuthorizationType: NONE
          Integration:
             Type: MOCK

  comboANYMethod:
      Type: AWS::ApiGateway::Method
      Properties:
          RestApiId: !Ref comboAPI
          ResourceId: !GetAtt comboAPI.RootResourceId
          HttpMethod: ANY
          AuthorizationType: NONE
          Integration:
            Type: MOCK

  apiDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn: 
        - RootANYMethod
        - comboANYMethod
      Properties:
          RestApiId: !Ref comboAPI
          StageName: Development

Outputs:
  LambdaARN:
    Value: !GetAtt lambdaFunction.Arn
  websiteBucketArn:
    Value: !GetAtt websiteBucket.Arn
  comboTableArn:
    Value: !GetAtt comboTable.Arn
  templateBucketArn:
    Value: !GetAtt templateBucket.Arn
  RestApiId:
    Value: !GetAtt comboAPI.RestApiId
  RestApiResourceId:
    Value: !GetAtt comboAPI.RootResourceId
  RootANYMethodName:
    Value: !Ref RootANYMethod
  comboANYMethodName:
    Value: !Ref comboANYMethod
  apiDeploymentId:
    Value: !GetAtt apiDeployment.DeploymentId
  WebsiteURL:
    Description: URL for website hosted on S3
    Value: !GetAtt websiteBucket.WebsiteURL
  WebsiteSecureURL:
    Description: Name of S3 bucket to hold website content
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt websiteBucket.DomainName
      